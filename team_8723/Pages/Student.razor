@page "/Studect"
<link href="https://use.fontawesome.com/releases/v5.14.0/css/all.css" rel="stylesheet">
@using team_8723.Shared
<PageTitle>@menu6</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">@menu6</MudText>
@if (forecasts == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudGrid>
    @foreach(PositionGroup positionGroup in positionGroups)
    {
        <MudListItem Icon="@positionGroup.icon">
            <MudText Typo="Typo.h5" GutterBottom="true">@positionGroup.group_name</MudText>
        </MudListItem>
        @foreach(StudentData studentData in forecasts)
        {
            @if(studentData.Position.Contains(positionGroup.position)==true)
            {
                <MudItem xs="12" sm = "6"lg = "3" md="4">
                    <MudCard>
                        <MudCardMedia Image=@($"student_image/{studentData.image}") Height="350" />
                        <MudCardContent>
                            <MudText Typo="Typo.h4">@studentData.name</MudText><br/>
                                @foreach (string str in studentData.introduction)
                                {
                                    <MudText Typo="Typo.h6">@str</MudText>
                                }
                        </MudCardContent>
                        <MudCardActions>
                             @if (string.IsNullOrEmpty(studentData.fb)==false)
                            {
                                <MudIconButton Target="_blank" Link = "@studentData.fb" Icon="@Icons.Custom.Brands.Facebook" Size = "Size.Large" Color="Color.Info" aria-label="Facebook"></MudIconButton> 
                            }
                            @if (string.IsNullOrEmpty(studentData.instagram)==false)
                            {
                                <MudIconButton Target="_blank" Link = "@studentData.instagram" Icon="@Icons.Custom.Brands.Instagram" Size = "Size.Large" Color="Color.Secondary" aria-label="Instagram"></MudIconButton>
                            }
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }

        }
    }
</MudGrid>
}

@code {
    private List<StudentData> forecasts=null;
    private List<PositionGroup> positionGroups;

    public class PositionGroup
    {
        public string group_name { get; set; } = "";
        public string position { get; set; } = "";
        public string icon { get; set; } = Icons.Sharp.Person;
    }
    public string menu6 = Data.Chinese_language.menu6;
    protected override async Task OnInitializedAsync()
    {
        Data.page = "/Studect";
        forecasts = await Http.GetFromJsonAsync<List<StudentData>>("sample-data/student_image.json");
        positionGroups = await Http.GetFromJsonAsync<List<PositionGroup>>("sample-data/positionGroups.json");
        artical();
        foreach(PositionGroup positionGroup in positionGroups)
        {


            switch (positionGroup.icon)
            {
                case "Icons.Sharp.Person":
                     positionGroup.icon = Icons.Sharp.Person;
                    break;

                case "Icons.Filled.Settings":
                     positionGroup.icon = Icons.Filled.Settings;
                    break;

                case "Icons.Sharp.BuildCircle":
                     positionGroup.icon = Icons.Sharp.BuildCircle;
                    break;
                case "Icons.Filled.Code":
                     positionGroup.icon = Icons.Filled.Code;
                    break; 
                case "Icons.Sharp.PeopleAlt":
                     positionGroup.icon = Icons.Sharp.PeopleAlt;
                    break;

                default:
                    positionGroup.icon = Icons.Sharp.Person;
                    break;
            }
        }
    }
    public void artical()
    {
        if (Data.language == "english")
        {
            menu6 = Data.Chinese_language.menu6;

        }
        else
        {
            menu6 = Data.English_language.menu6;
        }
    }
}
